% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/podlove_graph_download_curves.R
\name{podlove_graph_download_curves}
\alias{podlove_graph_download_curves}
\title{Create download curve plot}
\usage{
podlove_graph_download_curves(
  df_tidy_data,
  gvar = "Total",
  cumulative = TRUE,
  plot_type = "line",
  labelmethod = "last.points",
  printout = TRUE,
  ...
)
}
\arguments{
\item{df_tidy_data}{A tidy data frame with download data, as constructed
by \code{podlove_prepare_stats_for_graph()}}

\item{gvar}{Optional grouping parameter (e.g. episode title), handed over
to \code{ggplot2::aes(color)}.}

\item{cumulative}{Boolean switch to show either cumulative data (TRUE, default),
or non-comulative data (FALSE)}

\item{plot_type}{Sets the plot type to either line plot (\code{"line"}) or
ridgeline plot (\code{"ridge"}).}

\item{labelmethod}{Defines where should the labels be attached 
(at the beinning of the curves: \code{"last.points"}, default, or at
the end of the curves \code{"first.points"})}

\item{printout}{Switcher to automatically print out the plot (default TRUE)}

\item{...}{additional formating parameters for \code{ggplot2::geom_line()}
or \code{ggridges::geom_density_ridges}.}
}
\value{
A ggplot object
}
\description{
Based on a prepared dataset, this function creates a line curve diagram
    of downloads over time. It takes an optional grouping variable (e.g.
    title) as well as options for cumulative display, labeling and 
    print output. For more finetuning options, use the \code{podlove_baseplot()}
    function and add geoms to your liking.
}
\examples{
\dontrun{
# relative, daily plot by episode title, cumulative
data("podcast_example_data")
gdata <- podlove_prepare_stats_for_graph(podcast_example_data, gvar = title) 
podlove_graph_download_curves(gdata, gvar = title, cumulative = TRUE)

# relative, hourly plot by episode number, cumulative
gdata <- podlove_prepare_stats_for_graph(podcast_example_data, 
                                         gvar = ep_number, hourly = TRUE) 
podlove_graph_download_curves(gdata, gvar = ep_number, cumulative = TRUE)

# absolute, daily plot by episode title, noncumulative, with labels at the beginning
gdata <- podlove_prepare_stats_for_graph(podcast_example_data, 
                                         gvar = title, relative = FALSE) 
podlove_graph_download_curves(gdata, gvar = title, cumulative = FALSE, 
                              labelmethod = "first.points")
                              
# abolute, hourly plot by podcast client name, cumulative
gdata <- podlove_prepare_stats_for_graph(podcast_example_data, 
                                         gvar = client_name, relative = FALSE) 
podlove_graph_download_curves(gdata, gvar = client_name, cumulative = TRUE)
}

}
\seealso{
podlove_prepare_stats_for_graph()
}
